GIT
Workflow - procedure/protocol/agreement
in your team abouthow you will work

note: git branch (will list all branches u can checkout)

Git flows
-centralized
-feature branch workflow
-gitflow workflow
fork/pull-request

New Git command
-branch ex: "git branch featureX"
-checkout "git checkout featureX"
-merge "git merge featureX"(potential merge conflict)

Demo
-git clone
https://github.com/orrbcit/history
-created a new branch (from master)
-checkout new branch
-in the new branch, create new stuff
(stage, commit, clean)
-switch back to master
-independent branches

Checkout
-a previous commit
-changed the head (a pointer to the last
commit of the current branch)

Checkout
- a branch "git checkout featureX"

GitHub New Commands
-fork, copy of someone elses repo on github into your github
-pull-request, to the owner that you forked from
-wait? for owner to accept after some chat
Used for Open-Source Projects.
GitHub gives you a chance to talk.

Feature-Branch workflow
-master branch
-clone it to local dir
-from master, everyone create feature branch
-work on your branch
-push your branch to remote server (GitHub)
-from GitHub, pull-request of your branch into master
-after some chat, "merge pull-request"

Gitflow workflow
-master branch
-developer branch (created from master)
-everyone creates feature branch
FROM DEVELOPER (not master)
-work on your branch
-push your branch to remove server
-from GitHub, pull-request of your branch
into DEVELOPER
-after some chat, "merge pull-request"
-from GitHub, pull-request of developer into MASTER
for production request 

Centralized workflow
-only master
-clone it to local
-changes 
-"git push url ____" (pushing master)
-no protection over your master
-okay if your team is closely talking in person
-sneak in a change/push/collaborator

In Feature-Branch
-clone local
-created your branch
-make changes
-merge your branch into master (locally)
-push master

In Gitflow workflow
-merge your branch into develop (locally)
-push develop 12345678
(bypass pull-request)

Revert to go back to ...
"git revert 12345678" (12345678 is the hashcode use git log) 8bits good enough
UNDO the commit by another commit

Reset- permanent undo (deletes that commit)
"git reset 12345678" 

REVIEW:

Git Workflow

Git: branch, checkout, merge (one into another/base)
Github: fork, pull-request (PR) (merge onto into another)
all merge results in a commit
pull is a combo of fetch and merge/commit

Workflows
1. centralized
- everyone works on master
- clone master
- work locally
- push to master

2. feature-branch
- cloned to local
- one infinite branch called master
- everyone creates own branch from master, locally
- do your work
-> merge your branch into master, push master to ghub
-> push your branch to ghub, issue a Pull-Request of
your branch into the master, chat, merge/commit

3. gitflow
- two permanant/infinite/ongoing branches develop master
- clone
- everyone creates own branch from develop
- do your work
-> merge your branch into DEVELOP, push DEVELOP to ghub
-> push your branch to ghub, issue a Pull-Request of your
branch INTO DEVELOP(base), chat, merge/commit
- Issue Pull-Request of DEVELOP into MASTER (release)

4. fork/PR
- Open source projects, trust and sharing
- copy of ghub project into your ghub account
- clone to local
- look or work on it
- push to your ghub
- issue PR to torvalds/linux

github, bitbucket
apply for github edu package (private)
gitlab (bcit - d2l news) for private




